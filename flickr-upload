#!/bin/env ruby
require 'sequel'
require 'pp'

Sequel.connect("sqlite://db/flickr_syncd.db")

require_relative 'lib/flickr_syncd'

FlickrSyncd::Authenticator.load_settings("config/settings.json")
base_dir = ARGV[0]


if FlickrSyncd::Authenticator.needs_authorization?
  puts "You need to authorize you application"
  puts "When you hit Enter a browser will open the authorization page"
  puts "Please authorize the application, copy the verification code for pasting it below."
  auth_data = FlickrSyncd::Authenticator.authorize

  gets

  puts "Lauching browser. Please wait..."

  browser = ENV['BROWSER'] || 'firefox'
  `#{browser} #{auth_data[:auth_url]}`

  puts "Please Enter the verification code:"
  verify_code = gets.strip 

  FlickrSyncd::Authenticator.authenticate(auth_data[:token_data]['oauth_token'],
                                          auth_data[:token_data]['oauth_token_secret'],
                                          verify_code)
end

FlickrSyncd::Authenticator.login

flickr_acct = FlickrSyncd::FlickrAccount.new(FlickrSyncd::Authenticator.credentials)

Dir["#{base_dir}/**"].sort.each do |set_name|
  dataset = FlickrSyncd::Set.find(:name => set_name)
  media_files = Dir["#{set_name}/*.{jpg,JPG,png,PNG,gif,GIF}"].sort

  if dataset
    puts "Checking #{dataset.name}..."
    uploaded_photos = FlickrSyncd::Photo.where(:set_id => dataset.id)
    remaining_photos = media_files - uploaded_photos.map(&:title)

    if remaining_photos.any?
      puts "Uploading pictures to #{dataset.name}"
      flickr_set = flickr_acct.upload_to_set(remaining_photos, dataset.id)

      flickr_set[:uploaded_files].each do |flickr_id, file_path|
        FlickrSyncd::Photo.create(:id => flickr_id, :title => file_path, :set_id => dataset.id, :user_id => FlickrSyncd::Authenticator.user_id)
      end
    else
      puts "Set #{dataset.name} is uploaded completely"
      puts ""
    end
  else
    if media_files.any?
      puts "New set: #{set_name}"
      flickr_acct.upload_to_set(media_files)
    else
      puts "Empty directory #{set_name}"
    end
  end
end
